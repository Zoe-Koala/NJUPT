#include "Deque.h"
#include "error.h"
#include <stdlib.h>

//创建新的Deque
Deque DequeNew()
{
	Deque D;
	D = (Deque)malloc(sizeof(struct DequeRecord));
	CHECK(D);
	D->Front = D->Rear = (Node)malloc(sizeof(struct DequeRecord));  //空的头
	CHECK(D->Front);
	D->Front->Element = 0;    //初始化
	D->Rear->Next = NULL;
	return D;
}

//删除Deque
void DequeDelete(Deque D)
{
	if (D)
	{
		while (D->Front)
		{
			D->Rear = D->Front->Next;
			free(D->Front);
			D->Front = D->Rear;
		}
		free(D);
	}
}

//删除所有的节点除了头节点
void DequeClear(Deque D)
{
	if (D)
	{
		while (D->Front->Next)     //删除第一个节点
		{
			D->Rear = D->Front->Next->Next;
			free(D->Front->Next);
			D->Front->Next = D->Rear;
		}
		D->Rear = D->Front;
	}
}

//判断Deque是否为空
int IsEmpty(Deque D)
{
	return D->Front == D->Rear;
}

//将X元素压栈到D中
void Push(ElemType X, Deque D)
{
	Node NewNode;
	NewNode = (Node)malloc(sizeof(struct NodeRecord));   //建立新的节点
	CHECK(NewNode);
	NewNode->Element = X;
	NewNode->Next = D->Front->Next;
	if (D->Front == D->Rear)                   //如果D为空
		D->Rear = NewNode;
	D->Front->Next = NewNode;       //压栈
}

//将第一个元素出栈
ElemType Pop(Deque D)
{
	Node Temp;
	ElemType Item;
	if (D->Front == D->Rear)
	{
		Error("Deque is empty");
		return 0;
	}
	else
	{
		Temp = D->Front->Next;    //得到第一个元素
		D->Front->Next = Temp->Next;  //重置第一个元素
		if (Temp == D->Rear)    //如果只有第一个元素
			D->Rear = D->Front;   //将D置空
		Item = Temp->Element;
		free(Temp);
		return Item;
	}
}

//插入元素X至D末尾
void Inject(ElemType X, Deque D)
{
	Node NewNode;
	NewNode = (Node)malloc(sizeof(struct NodeRecord));  //创建新节点
	CHECK(NewNode);
	NewNode->Element = X;
	NewNode->Next = NULL;
	D->Rear->Next = NewNode;
	D->Rear = NewNode;
}







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































void DequeClear(Deque D);
int IsEmpty(Deque D);
void Push(ElemType X, Deque D);
ElemType Pop(Deque D);
void Inject(ElemType X, Deque D);
